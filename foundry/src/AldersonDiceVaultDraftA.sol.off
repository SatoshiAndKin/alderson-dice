// SPDX-License-Identifier: UNLICENSED
pragma solidity 0.8.26;

import {ERC4626, ERC20} from "@solady/tokens/ERC4626.sol";
import {SafeTransferLib} from "@solady/utils/SafeTransferLib.sol";

// TODO: rewrite this to use 
contract AldersonDice {
    using SafeTransferLib for address;

    // vaultToken => user => balance
    mapping(address => mapping(address => uint256)) public balances;

    // vaultToken => shares
    mapping(address => uint256) public pool;

    address public owner;
    address public nextOwner;

    constructor(address _owner) {
        owner = _owner;
    }

    function setNextOwner(address _nextOwner) public {
        require(msg.sender == owner, "auth");
        nextOwner = _nextOwner;
    }

    function acceptOwner() public {
        require(msg.sender == nextOwner, "auth");
        owner = nextOwner;
    }

    function deposit(ERC4626 vaultToken, uint256 amount) public {
        address asset = vaultToken.asset();

        asset.safeTransferFrom(msg.sender, address(this), amount);

        ERC20(asset).approve(address(vaultToken), amount);

        uint256 shares = vaultToken.deposit(amount);

        uint256 half = amount / 2;

        // TODO: off by 1 on dividing shares by 2 here?
        balances[address(vaultToken)][msg.sender] += half;
        balances[address(vaultToken)][address(this)] += amount - half;

        // TODO: i don't think pool is right
        pool[address(vaultToken)] += shares / 2;
    }

    function withdraw(ERC4626 vaultToken, uint256 amount) public {
        require(balances[address(vaultToken)][msg.sender] >= amount, "Insufficient balance");

        vaultToken.withdraw(amount, msg.sender, address(this));

        balances[address(vaultToken)][msg.sender] -= amount;
    }

    function balanceOf(ERC4626 vaultToken, address user) public view returns (uint256) {
        return balances[address(vaultToken)][user];
    }

    function ownedWithdraw(ERC4626 vaultToken, uint256 amount) public {
        require(msg.sender == owner, "auth");

        revert("wip");
    }
}
